Notes expliquant la démarche pour travailler sur le site de l'association en utilisant python et git

* Bien comprendre 'pyenv'
Ce logiciel facilite la gestion des versions de python, pour éviter de modifier l'environnement de votre système.  Il crée un raccourci dans le ==$PATH== pour que les commandes python appellent les programmes qu'il aura installé dans son dossier ==.pyenv== avant ceux du système.

* Django

** Prérequis
installer django avec pip
#+BEGIN_SRC python  -i
python -m pip install django
#+END_SRC

** Créer un projet django
#+BEGIN_SRC bash  -i
django-admin startproject aupci
cd aupci
#+END_SRC

** Lancer le server
#+BEGIN_SRC bash  -i
python manage.py runserver
python manage.py migrate
#+END_SRC
** Se connecter en local avec un navigateur
Vous verrez une page django comme quoi l'installation à réussie.
** Créer une application
#+BEGIN_SRC bash  -i
export NomApp="accueil"  # changer pour ce que vous voulez
python manage.py startapp $NomApp
#+END_SRC
Cela crée un nouveau dossier $NomApp avec un fichier apps.py qui contient une classe NomAppConfig
** Configuration de base
   
ALLOWED_HOSTS = ["localhost"]
ajoute  l'app dans installed_apps

*** urls
#+BEGIN_SRC python $NomPrj/urls.py
#...
path("", include("aupci.urls")),
#...
#+END_SRC

*** Créer $NomApp/urls.py
    #+BEGIN_SRC python  -i
from django.urls import path
from . import views
from django.conf.urls import handler404

app_name = 'accueil'

urlpatterns = [
    path('', views.Accueil.as_view(), name='accueil'),
]

handler404 = 'accueil.views.error_404_view'

    #+END_SRC

** Ecrire la logique de l'application (vue)

   #+BEGIN_SRC python  -i
from django.shortcuts import render

# Create your views here.
class Accueil(View):
    def get(self, request):
        # contexte pour les pages
        return render(request, "accueil/home.html")
   #+END_SRC
** les templates
   créer le répertoire et les fichiers de templates


* Conclusion
  bien lire les messages d'erreurs de django
