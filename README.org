#+LANGUAGE: fr
#+OPTIONS: H:2 toc:t num:t author:nil title:nil date:nil ^:{}

Instructions pour recréer le site web en local.

* Gestion de Python
  Afin d'éviter des conflits avec les applications python utilisé par l'OS il est bien d'installer =pyenv= qui permet de gérer en parallèle différentes version de python.
  Par exemple, Ce website est créer avec =python 3.8.2= et vous devriez travailler avec la même version.

** Installer =pyenv=
Il y a de légère différence entre le =pyenv= des linux et le =pyenv= de windows.  Avec celui de windows il faut gérer ses environnements virtuels séparément avec =virtualenv=.     Avec le =pyenv= de linux =virtualenv= est inclus dans =pyenv= et s'utilise en faisant
#+BEGIN_SRC bash  -i
# active l'environnement virtuel appelé web
pyenv activate web

# Crée un nouvel environnement virtuel appelé web2
pyenv virtualenv web2
#+END_SRC

*** Sur linux (famille debian)
Suivre les instruction du [[https://github.com/pyenv/pyenv][projet sur github]].  En gros
**** S'assurer d'avoir les dépendances pour compiler différentes version de python
#+BEGIN_SRC bash  -i
sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
#+END_SRC
**** Télécharger et exécuter l'installateur automatique

     #+BEGIN_SRC bash  -i
curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
     #+END_SRC
**** Vérifier ses fichiers de config du bash
***** dans .bashrc avoir
#+BEGIN_SRC bash  -i
eval "$(pyenv init -)"
#+END_SRC

***** dans .profil avoir
#+BEGIN_SRC bash  -i
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
fi
#+END_SRC
**** Redémarrer
pour mettre à jour pour recharger ses fichiers de config

     

*** Pour windows
    Suivre les instructions de https://github.com/pyenv-win/pyenv-win

    

** Installer python 3.8.2
#+BEGIN_SRC bash  -i
pyenv install 3.8.2
# créer un répertoire pour le dev web
mkdir webdev; cd webdev
# choisir la version python 3.8.2 pour ce dossier (et sous dossier)
pyenv local 3.8.2
#+END_SRC

* Installation du site web
** Créer un environnement virtuel
   #+BEGIN_SRC bash  -i
# avec linux
pyenv virtualenv webdev

# avec windows
python -m pip install virtualenv
virtualenv .
   #+END_SRC

** Télécharger le code du site web 
#+BEGIN_SRC bash  -i
git clone git@github.com:maliky/aupci.git
#+END_SRC
Cela va créer un répertoire avec le suivi git.
*** Faciliter les mises à jour git
Ajouter votre clef publique dans votre profil git (voir section sécurité)
- rappel :: pour générer la pair de clefs utiliser =ssh-keygen=


** Installer les librairies pour le développement du site web
#+BEGIN_SRC bash  -i
cd aupci
python -m pip install -r requirements.txt
#+END_SRC

Le fichier requirements.txt liste simplement les paquets python utilisés par notre projet.

** Lancer le site web
#+BEGIN_SRC bash  -i
python manage.py runserver
#+END_SRC   

Si vous avez un avertissement concernant la base de donnée (qui n'est pas partagée) utiliser
#+BEGIN_SRC bash  -i
python manage.py migrate
#+END_SRC

Cela recrée un base de donnée vierge.

L'idée c'est dans un premier temps de ne pas partager la base de données (sqlite) mais d'en utiliser une vierge sur chacune de nos machines.

Normalement le site web doit être accessible à l'adresse http://localhost:8000

* Répartition du travail
Vous verrez que la page de garde est très simple.  Je (@malik) me charge de reproduire celle du site contenu dans le dossier `maquette_website`

** Page "admin"
localhost:8000/admin   -> point vers un portail d'administration installé par défaut mais dont nous n'avons pas besoin à moins de gérer divers profils d'utilisateurs

** Prise en main de django
Pour la prise en main de django je propose de vous attribuer chacun la responsabilité d'un page web:
*** Les pages
**** Page "Évènement" @Morié
 Accessible à aup.ci/evenement
**** Page "Qui Sommes-nous" @Atta
 Accessible à aup.ci/qui-somme-nous    
**** Page "Contact" @Gnimanssoun
 Accessible à aup.ci/contact    
**** Page "Adhésion" @Kopoin
 Accessible à aup.ci/contact    
*** Comment les éditer ?
Les fichiers à modifier sont principalement :
**** accueil/urls.py
fait le lien entre l'url et le classe (View) qui contient la logique pour générer la page
**** accueil/views.py
gère la logique de la requête.  En gros récupère l'objet HTTPRequest associé à POST, GET, PUT ect. effectue en traitement et appelle un template pour représenter les data
**** accueil/templates/accueil/
C'est le dossier qui contient les templates appelé par les views.  On parle de templates, car il y a un mini langage pour par exemple faire un tableau html à partir d'un objet python list.  Et puis on peut réutiliser du code comme le fichier base.html (avec les headers)

** Exploration flask @Adelph
Je propose que l'un d'entre nous regarde la possibilité de faire un site pour pycon par exemple avec flask.  On pourrait voir comment reproduire la page d'accueil de aupci avec flask.  C'est peut être plus simple et rapide à maîtriser.




* Organisation du travail
C'est évidemment un travail collaboratif, mais pour une efficacité accrue il faut que nous nous mettions tous à peu près au même niveau.  Je propose de faire un point physique jeudi prochain à 10h au LARIT pour dénouer les gros blocages.  D'ici là chacun devrait se documenter sur django et prendre pour exemple le code de ce dossier simple et fonctionnel.
Le projet djanog est aupci et l'application est accueil
